{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "lendingclubwspace"
		},
		"LS_AzureSqlDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDB'"
		},
		"LS_Loading_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Loading'"
		},
		"LS_Staging_01_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Staging_01'"
		},
		"OnPremise_FS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'OnPremise_FS'"
		},
		"lendingclubwspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lendingclubwspace-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:lendingclubwspace.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"LS_Staging_01_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lendingclubadlsgen2.dfs.core.windows.net/"
		},
		"OnPremise_FS_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\localhost\\C$\\AzureFileSystem"
		},
		"OnPremise_FS_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "Zeeshan Sarwar"
		},
		"lendingclubwspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lendingclubadlsgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/LC_Pipeline_Run')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "OnPremiseDataExtraction",
						"description": "Extraction of data from an on premise server to azure data lake storage gen 2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_OnPremDataExtraction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "LoadingDataLakeDatatoDWH",
						"description": "Loading of data from ADLS gen2 to Azure Synapse DWH",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "OnPremiseDataExtraction",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_LoadingToDWH",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "CleaningTransformationAndLoading",
						"description": "Cleaning and transformation on Bronze data and loading into Gold Schema",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LoadingDataLakeDatatoDWH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TransformationNBs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-24T05:51:00Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_OnPremDataExtraction')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_LoadingToDWH')]",
				"[concat(variables('workspaceId'), '/pipelines/PL_TransformationNBs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_LoadingToDWH')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Staging_00",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Data flow1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Dataflow1",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {
													"file_name": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												"sink1": {
													"table_name": {
														"value": "@concat(substring(item().name,0,lastIndexOf(item().name,'.')))",
														"type": "Expression"
													}
												}
											},
											"linkedServiceParameters": {
												"source1": {
													"schemaLinkedService": {
														"file_name": {
															"value": "@item().name",
															"type": "Expression"
														}
													}
												}
											}
										},
										"staging": {
											"linkedService": {
												"referenceName": "lendingclubwspace-WorkspaceDefaultStorage",
												"type": "LinkedServiceReference"
											},
											"folderPath": "temp-staging"
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-21T07:42:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Staging_00')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]",
				"[concat(variables('workspaceId'), '/linkedServices/lendingclubwspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_LoadingToWarehouse')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetStagingAreaInformation",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS001",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetStagingAreaInformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetStagingAreaInformation').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadingDataintoDWH",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowCopyCommand": true,
											"copyCommandSettings": {},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "lendingclubwspace-WorkspaceDefaultStorage",
												"type": "LinkedServiceReference"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Staging_01",
											"type": "DatasetReference",
											"parameters": {
												"file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Loading",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": "bronze",
												"table_name": {
													"value": "@concat(substring(item().name,0,lastIndexOf(item().name,'.')))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Archived_PL"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-21T12:44:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS001')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Staging_01')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Loading')]",
				"[concat(variables('workspaceId'), '/linkedServices/lendingclubwspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_OnPremDataExtraction')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetFileSystemInformation",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_onpremdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "DataLoading",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFileSystemInformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileSystemInformation').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadDatatoStagingArea",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_onpremdata",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Staging_00",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "LC_Logger_onSuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DataLoading",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[ELT_LC].[usp_logger]",
							"storedProcedureParameters": {
								"errors": {
									"value": {
										"value": "@activity('LoadDatatoStagingArea').output.errors",
										"type": "Expression"
									},
									"type": "String"
								},
								"execution_date": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rows_copied": {
									"value": {
										"value": "@activity('LoadDatatoStagingArea').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"rows_read": {
									"value": {
										"value": "@activity('LoadDatatoStagingArea').output.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"source": {
									"value": {
										"value": "@activity('LoadDatatoStagingArea').output.executionDetails[0].source.type",
										"type": "Expression"
									},
									"type": "String"
								},
								"target": {
									"value": {
										"value": "@activity('LoadDatatoStagingArea').output.executionDetails[0].sink.type",
										"type": "Expression"
									},
									"type": "String"
								},
								"throughput": {
									"value": {
										"value": "@activity('LoadDatatoStagingArea').output.throughput",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSqlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-23T07:03:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_onpremdata')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_AzureSqlDB')]",
				"[concat(variables('workspaceId'), '/datasets/DS_Staging_00')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_TransformationNBs')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "NB_Customer_Dimension",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Dims_Customer",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					},
					{
						"name": "NB_Investor_Dimension",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NB_Customer_Dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Dims_Investor",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "LCsparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					},
					{
						"name": "NB_Loan_Details_Dimension",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NB_Investor_Dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Dims_Loan_Details",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					},
					{
						"name": "NB_Account_Details_Dimension",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NB_Loan_Details_Dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Dims_Account_Details",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "LCsparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					},
					{
						"name": "NB_Payment_Dimension",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NB_Account_Details_Dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Dims_Payment_Details",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "LCsparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					},
					{
						"name": "NB_Defaulters_Dimension",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NB_Payment_Dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Dims_Loan_Defaulter_Details",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "LCsparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					},
					{
						"name": "NB_Fact_Table",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NB_Defaulters_Dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Cleaning_Fact_Table",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "LCsparkpool",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 2
							},
							"driverSize": "Small",
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-23T05:29:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Dims_Customer')]",
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Dims_Investor')]",
				"[concat(variables('workspaceId'), '/bigDataPools/LCsparkpool')]",
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Dims_Loan_Details')]",
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Dims_Account_Details')]",
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Dims_Payment_Details')]",
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Dims_Loan_Defaulter_Details')]",
				"[concat(variables('workspaceId'), '/notebooks/Cleaning_Fact_Table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS001')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lendingclubwspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "fs-lendingclub-staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cust_id",
						"type": "String"
					},
					{
						"name": "mem_id",
						"type": "String"
					},
					{
						"name": "fst_name",
						"type": "String"
					},
					{
						"name": "lst_name",
						"type": "String"
					},
					{
						"name": "prm_status",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lendingclubwspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_AzureSynapseAnalyticsTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lendingclubwspace-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "LC_DWH"
					}
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "bronze",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/lendingclubwspace-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Loading')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Loading",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string",
						"defaultValue": "bronze"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "loan"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Loading')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Staging_00')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Staging_01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "fs-lendingclub-staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Staging_01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_Staging_01')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Staging_01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"fileSystem": "fs-lendingclub-staging"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_Staging_01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_onpremdata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremise_FS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "*.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/OnPremise_FS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_AzureSqlDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDB_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Loading')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('LS_Loading_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_Staging_01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Staging_01_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Staging_01_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OnPremise_FS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('OnPremise_FS_properties_typeProperties_host')]",
					"userId": "[parameters('OnPremise_FS_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('OnPremise_FS_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IR-POC-01",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/IR-POC-01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lendingclubwspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('lendingclubwspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lendingclubwspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('lendingclubwspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IR-POC-01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Staging_01",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapseAnalyticsTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_Staging_01')]",
				"[concat(variables('workspaceId'), '/datasets/DS_AzureSynapseAnalyticsTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FactDimensionTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP TABLE [gold].[customer_dim]\nCREATE TABLE [gold].[customer_dim]\n(\n customer_id varchar(50),\n member_id VARCHAR(50),\n first_name varchar(50),\n last_name varchar(50),\n prm_status varchar(10),\n age INT,\n state varchar(30),\n country varchar(30)\n)\nWITH\n(\n    DISTRIBUTION = HASH (customer_id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n\n\nCREATE TABLE [gold].[investor_dim]\n(\n investor_id varchar(30),\n loan_funded_amount INT,\n investor_type varchar(50),\n age INT,\n state varchar(30),\n country varchar(30)\n)\nWITH\n(\n    DISTRIBUTION = HASH (investor_id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nDROP TABLE [gold].[Loan_Details_Dim]\nCREATE TABLE [gold].[Loan_Details_Dim] (\n\tloan_id varchar(30) not null,\n\tmember_id VARCHAR(50),\n\tloan_amnt INT, \n\tfunded_amnt int, \n\tterm VARCHAR(30), \n\tint_rate varchar(30), \n\tinstallment DECIMAL(18, 2), \n\tissue_d VARCHAR(50), \n\tloan_status VARCHAR(50), \n\tpurpose VARCHAR(50), \n\ttitle VARCHAR(50), \n\tdisbursement_method VARCHAR(50)\n)\nWITH\n(\n    DISTRIBUTION = HASH (loan_id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n\nDROP TABLE [gold].[Account_Details_Dim]\n\nCREATE TABLE [gold].[Account_Details_Dim] (\n\taccount_id  VARCHAR(50) NOT NULL,\n\tmember_id VARCHAR(50),\n\tgrade VARCHAR(50), \n\tsub_grade VARCHAR(50), \n\temp_title VARCHAR(50) , \n\temp_length VARCHAR(50), \n\thome_ownership VARCHAR(50), \n\tannual_inc INT, \n\tverification_status VARCHAR(50), \n\ttotal_acc INT, \n\tapplication_type VARCHAR(50), \n\tannual_inc_joint INT,  \n\tverification_status_joint VARCHAR(50), \n\ttot_hi_cred_lim INT\n)\nWITH\n(\n    DISTRIBUTION = HASH (account_id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nCREATE TABLE [gold].[Fact_table] (\n\tid  INT,\n\tloan_id VARCHAR(50) NOT NULL, \n\tcustomer_id VARCHAR(50) NOT NULL, \n\taccount_id VARCHAR(50) NOT NULL, \n\ttransaction_id VARCHAR(50) NOT NULL, \n\tdefaulter_id VARCHAR(50) NOT NULL, \n\tinvestor_id VARCHAR(50) NOT NULL, \n\tloan_amnt INT\n)\nWITH\n(\n    DISTRIBUTION = HASH (id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n |-- transaction_id: string (nullable = false)\n |-- funded_amnt_inv: integer (nullable = true)\n |-- installment: decimal(18,2) (nullable = true)\n |-- total_pymnt: decimal(18,2) (nullable = true)\n |-- last_pymnt_d: string (nullable = true)\n |-- last_pymnt_amnt: decimal(18,2) (nullable = true)\n |-- next_pymnt_d: string (nullable = true)\n |-- disbursement_method: string (nullable = true)\n\n\nDROP TABLE [gold].[Payment_Details_Dim]\nCREATE TABLE [gold].[Payment_Details_Dim] (\n\ttransaction_id  VARCHAR(50) NOT NULL,\n\tmember_id VARCHAR(50) ,\n\tfunded_amnt_inv INT, \n\tinstallment DECIMAL(18,2), \n\ttotal_pymnt DECIMAL(18,2) , \n\tlast_pymnt_d VARCHAR(50), \n\tlast_pymnt_amnt DECIMAL(18,2), \n\tnext_pymnt_d VARCHAR(50), \n\tdisbursement_method VARCHAR(20)\n)\nWITH\n(\n    DISTRIBUTION = HASH (transaction_id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n\n\n |-- defaulter_id: string (nullable = false)\n |-- delinq_2yrs: integer (nullable = true)\n |-- inq_last_6mths: integer (nullable = true)\n |-- pub_rec: integer (nullable = true)\n |-- total_rec_late_fee: integer (nullable = true)\n |-- delinq_amnt: integer (nullable = true)\n |-- pub_rec_bankruptcies: integer (nullable = true)\n |-- hardship_flag: string (nullable = true)\n |-- hardship_type: string (nullable = true)\n |-- hardship_amount: string (nullable = true)\n |-- hardship_length: string (nullable = true)\n\nDROP TABLE [gold].[Loan_Defaulter_Dim]\n CREATE TABLE [gold].[Loan_Defaulter_Dim] (\n\tdefaulter_id VARCHAR(50) NOT NULL,\n\tmember_id VARCHAR(50), \n\tdelinq_2yrs INT, \n\tinq_last_6mths INT,\n\tpub_rec INT,\n\ttotal_rec_late_fee INT,\n\tdelinq_amnt INT,\n\tpub_rec_bankruptcies INT, \n\thardship_flag VARCHAR(20), \n\thardship_type VARCHAR(50), \n\thardship_amount VARCHAR(20),\n\thardship_length VARCHAR(20)\n)\nWITH\n(\n    DISTRIBUTION = HASH (defaulter_id),\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dateDimension')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE gold.date_dim \n( date_key INT NOT NULL, \ndate DATE NOT NULL, \nweekday VARCHAR(9) NOT NULL, \nweekday_num INT NOT NULL, \nday_month INT NOT NULL, \nday_of_year INT NOT NULL, \nweek_of_year INT NOT NULL, \niso_week CHAR(10) NOT NULL, \nmonth_num INT NOT NULL, \nmonth_name VARCHAR(9) NOT NULL, \nmonth_name_short CHAR(3) NOT NULL, \nquarter INT NOT NULL, \nyear INT NOT NULL, \nfirst_day_of_month DATE NOT NULL, \nlast_day_of_month DATE NOT NULL,\n yyyymm CHAR(7) NOT NULL, \n weekend_indr CHAR(10) NOT NULL );\n\nselect count(*) from gold.date_dim\ntruncate table gold.date_dim\n\nINSERT INTO gold.date_dim\nSELECT CAST(CONVERT(VARCHAR(8), datum, 112) AS INT) AS date_key,\n    datum AS date,\n    DATENAME(WEEKDAY, datum) AS weekday,\n    DATEPART(WEEKDAY, datum) AS weekday_num,\n    DATEPART(DAY, datum) AS day_month,\n    DATEPART(DAYOFYEAR, datum) AS day_of_year,\n    DATEPART(WEEK, datum) AS week_of_year,\n    CAST(DATEPART(ISO_WEEK, datum) AS VARCHAR(4)) + '-W' + CAST(DATEPART(WEEKDAY, datum) AS VARCHAR(1)) AS iso_week,\n    DATEPART(MONTH, datum) AS month_num,\n    DATENAME(MONTH, datum) AS month_name,\n    LEFT(DATENAME(MONTH, datum), 3) AS month_name_short,\n    DATEPART(QUARTER, datum) AS quarter,\n    DATEPART(YEAR, datum) AS year,\n    DATEADD(MONTH, DATEDIFF(MONTH, 0, datum), 0) AS first_day_of_month,\n    EOMONTH(datum) AS last_day_of_month,\n    CONCAT(YEAR(datum), '-', FORMAT(datum, 'MM')) AS yyyymm,\n    CASE\n        WHEN DATEPART(WEEKDAY, datum) IN (6, 7) THEN 'weekend'\n        ELSE 'weekday'\n    END AS weekend_indr\nFROM (SELECT DATEADD(DAY, SEQUENCE.DAY, '2017-01-01') AS datum\n    FROM (SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS DAY FROM sys.objects) AS SEQUENCE\n    GROUP BY SEQUENCE.DAY) DQ\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/truncateTableCommands')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "TRUNCATE TABLE [gold].[Account_Details_Dim]\nTRUNCATE TABLE [gold].[customer_dim]\nTRUNCATE TABLE gold.Fact_table\nTRUNCATE TABLE gold.investor_dim\nTRUNCATE TABLE gold.Loan_Defaulter_Dim\nTRUNCATE TABLE gold.Loan_Details_Dim\nTRUNCATE TABLE gold.Payment_Details_Dim",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Dims_Account_Details')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3942bfdb-009b-465f-aa37-41d02aec3922"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import row_number, concat, col, lit\r\n",
							"from pyspark.sql.types import DecimalType"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_account_details = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.loan_details\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_account_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %%pyspark\r\n",
							"# (df_account_details.columns)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_1 = df_account_details.withColumn(\"account_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_account_details_1.limit(5))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_filtered = df_account_details_1.select(\"account_id\",\"member_id\", \"grade\",\"sub_grade\",\"emp_title\",\"emp_length\",\r\n",
							"\"home_ownership\",\"annual_inc\", \"verification_status\",\"total_acc\",\"application_type\",\"annual_inc_joint\",\r\n",
							"\"verification_status_joint\", \"tot_hi_cred_lim\")"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_account_details_filtered.limit(10))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_account_details_filtered.filter(col(\"annual_inc_joint\").isNotNull()).limit(2))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_filtered = df_account_details_filtered.withColumn(\"account_id\", concat(lit(\"ACCID\"), col(\"account_id\")))"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_account_details_filtered.printSchema()"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Casting"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_filtered = df_account_details_filtered.withColumn(\"tot_hi_cred_lim\",df_account_details_filtered.tot_hi_cred_lim.cast('int'))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_filtered = df_account_details_filtered.withColumn(\"annual_inc_joint\",df_account_details_filtered.annual_inc_joint.cast('int'))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_filtered = df_account_details_filtered.withColumn(\"total_acc\",df_account_details_filtered.total_acc.cast('int'))"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_account_details_filtered = df_account_details_filtered.withColumn(\"annual_inc\",df_account_details_filtered.annual_inc.cast('int'))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_account_details_filtered.printSchema()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details_filtered = df_loan_details_filtered.withColumn(\"installment\",df_loan_details_filtered.installment.cast(DecimalType(18,2)))"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# pd_account_details_filtered = df_account_details_filtered.toPandas()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# pd_account_details_filtered.describe()"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# pd_account_details_filtered.isnull().sum()"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# pd_account_details_filtered.nunique()"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_account_details_filtered.printSchema()"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_account_details_filtered.write\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .synapsesql(\"LC_DWH.gold.Account_Details_Dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 27
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Dims_Customer')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5f5f721c-6de3-4a38-8720-77f638a09140"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.types import DecimalType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import concat, col, lit, row_number, split,substring,regexp_replace, to_date"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_customer_data = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.customer_data\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Transformation Process and Creation of Customer Dimensional table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_customer_data.limit(10))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_customer_data = df_customer_data.withColumnRenamed(\"mem_id\", \"member_id\").withColumnRenamed(\"fst_name\", \"first_name\")\\\r\n",
							".withColumnRenamed(\"lst_name\", \"last_name\").withColumnRenamed(\"cust_id\",\"customer_id\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_customer_data.printSchema()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_customer_data = df_customer_data.withColumn(\"age\",df_customer_data.age.cast('int'))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# customer_data = df_customer_data.toPandas()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# customer_data.describe()"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# customer_data.isna().sum()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_customer_data.printSchema()"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_customer_data.write\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .synapsesql(\"LC_DWH.gold.customer_dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 15
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Dims_Investor')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e840182d-8cbf-4aab-9c85-a916cc97ca28"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.types import DecimalType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import concat, col, lit, row_number, split,substring,regexp_replace, to_date"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_investor_data = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.investor_data\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df_investor_data.limit(5))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_investor_data = df_investor_data.drop('investor_loan_id')"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_investor_data = df_investor_data.drop('loan_id')"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_investor_data.limit(2))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_investor_data = df_investor_data.withColumnRenamed(\"loan_funded_amt\",\"loan_funded_amount\") "
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_investor_data.printSchema()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_investor_data = df_investor_data.withColumn(\"age\",df_investor_data.age.cast('int'))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_investor_data = df_investor_data.withColumn(\"loan_funded_amount\",df_investor_data.loan_funded_amount.cast('int'))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# investor_data = df_investor.toPandas()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# investor_data.describe()"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# investor_data.isna().sum()"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_investor.printSchema()"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_investor_data.write\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .synapsesql(\"LC_DWH.gold.investor_dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Dims_Loan_Defaulter_Details')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cebd5061-502c-4e7a-8ca4-808f1ed5b965"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							},
							"collapsed": false
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.types import DecimalType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import concat, col, lit, row_number"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_loan_details = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.loan_details\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df_loan_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# (df_loan_details.columns)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details = df_loan_details.withColumn(\"defaulter_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_loan_details.select(\"defaulter_id\",\"member_id\",\"delinq_2yrs\",\"inq_last_6mths\",\r\n",
							"\"pub_rec\",\"total_rec_late_fee\", \"delinq_amnt\", \"pub_rec_bankruptcies\",\"hardship_flag\",\r\n",
							"\"hardship_type\", \"hardship_amount\", \"hardship_length\")"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_defaulter_details.limit(10))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"defaulter_id\", concat(lit(\"DEF\"), col(\"defaulter_id\")))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_defaulter_details.printSchema()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"delinq_2yrs\",df_defaulter_details.delinq_2yrs.cast('int'))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"inq_last_6mths\",df_defaulter_details.inq_last_6mths.cast('int'))"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"pub_rec\",df_defaulter_details.pub_rec.cast('int'))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"total_rec_late_fee\",df_defaulter_details.total_rec_late_fee.cast('int'))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"delinq_amnt\",df_defaulter_details.delinq_amnt.cast('int'))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_defaulter_details = df_defaulter_details.withColumn(\"pub_rec_bankruptcies\",df_defaulter_details.pub_rec_bankruptcies.cast('int'))"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_defaulter_details_pd = df_defaulter_details.toPandas()"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_defaulter_details_pd.describe()"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_defaulter_details_pd.isnull().sum()"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_defaulter_details_pd.nunique()"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_defaulter_details.printSchema()"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_defaulter_details.write\r\n",
							" # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
							" # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
							" # .option(Constants.SERVER, \"lendingclubwspace.sql.azuresynapse.net\")\r\n",
							" # if `Constants.TEMP_FOLDER` is not provided, the connector will use the runtime staging directory config (see section on Configuration Options for details).\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" # Required parameter - Three-part table name to which data will be written\r\n",
							" .synapsesql(\"LC_DWH.gold.Loan_Defaulter_Dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 19
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Dims_Loan_Details')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "LCsparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f59ff71e-cffc-47d7-ac56-f9a058a4b4e9"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"77671a6f-6848-4961-a802-c3c88d828322": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "68407277",
												"1": "MI1000",
												"2": "10000",
												"3": "10000",
												"4": "10000",
												"5": "36 months",
												"6": "20.39%",
												"7": "373.63",
												"8": "D",
												"9": "D4",
												"10": "Realtor",
												"11": "3 years",
												"12": "OWN",
												"13": "26000",
												"14": "Source Verified",
												"15": "Jun-18",
												"16": "Current",
												"17": "n",
												"20": "debt_consolidation",
												"21": "Debt consolidation",
												"22": "058xx",
												"23": "VT",
												"24": "56",
												"25": "0",
												"26": "Apr-05",
												"27": "0",
												"30": "10",
												"31": "0",
												"32": "35130",
												"33": "98.40%",
												"34": "16",
												"35": "w",
												"36": "9589.1",
												"37": "9589.1",
												"38": "741.6",
												"39": "741.6",
												"40": "410.9",
												"41": "330.7",
												"42": "0",
												"43": "0",
												"44": "0",
												"45": "Sep-18",
												"46": "373.63",
												"47": "Oct-18",
												"48": "Sep-18",
												"49": "0",
												"51": "1",
												"52": "Joint App",
												"53": "53000",
												"54": "30.14",
												"55": "Source Verified",
												"56": "0",
												"57": "0",
												"58": "64253",
												"59": "1",
												"60": "3",
												"61": "0",
												"62": "1",
												"63": "23",
												"64": "29123",
												"65": "69",
												"66": "1",
												"67": "6",
												"68": "1103",
												"69": "82",
												"70": "35700",
												"71": "0",
												"72": "0",
												"73": "1",
												"74": "7",
												"75": "6425",
												"76": "133",
												"77": "94",
												"78": "0",
												"79": "0",
												"80": "158",
												"81": "37",
												"82": "1",
												"83": "1",
												"84": "1",
												"85": "20",
												"87": "12",
												"89": "0",
												"90": "2",
												"91": "7",
												"92": "2",
												"93": "2",
												"94": "7",
												"95": "7",
												"96": "8",
												"97": "7",
												"98": "10",
												"99": "0",
												"100": "0",
												"101": "0",
												"102": "1",
												"103": "100",
												"104": "100",
												"105": "0",
												"106": "0",
												"107": "78151",
												"108": "64253",
												"109": "2200",
												"110": "42451",
												"111": "6881",
												"112": "Apr-05",
												"113": "0",
												"114": "0",
												"115": "5",
												"116": "99.2",
												"117": "1",
												"118": "4",
												"119": "0",
												"120": "0",
												"122": "N",
												"137": "Cash",
												"138": "N"
											},
											{
												"0": "68355089",
												"1": "MI1001",
												"2": "20000",
												"3": "20000",
												"4": "20000",
												"5": "60 months",
												"6": "13.06%",
												"7": "455.68",
												"8": "C",
												"9": "C1",
												"10": "Business Analyst",
												"11": "6 years",
												"12": "MORTGAGE",
												"13": "94000",
												"14": "Verified",
												"15": "Jun-18",
												"16": "Current",
												"17": "n",
												"20": "debt_consolidation",
												"21": "Debt consolidation",
												"22": "956xx",
												"23": "CA",
												"24": "22.29",
												"25": "1",
												"26": "Sep-00",
												"27": "0",
												"28": "21",
												"30": "12",
												"31": "0",
												"32": "51762",
												"33": "69.90%",
												"34": "16",
												"35": "w",
												"36": "19521.38",
												"37": "19521.38",
												"38": "882.34",
												"39": "882.34",
												"40": "478.62",
												"41": "403.72",
												"42": "0",
												"43": "0",
												"44": "0",
												"45": "Sep-18",
												"46": "455.68",
												"47": "Oct-18",
												"48": "Sep-18",
												"49": "0",
												"51": "1",
												"52": "Individual",
												"56": "0",
												"57": "0",
												"58": "520838",
												"59": "0",
												"60": "1",
												"61": "0",
												"62": "0",
												"63": "27",
												"64": "17705",
												"65": "70",
												"66": "0",
												"67": "1",
												"68": "21516",
												"69": "70",
												"70": "74000",
												"71": "0",
												"72": "0",
												"73": "1",
												"74": "2",
												"75": "43403",
												"76": "10021",
												"77": "82",
												"78": "0",
												"79": "0",
												"80": "49",
												"81": "213",
												"82": "14",
												"83": "8",
												"84": "1",
												"85": "14",
												"87": "9",
												"88": "21",
												"89": "0",
												"90": "6",
												"91": "10",
												"92": "6",
												"93": "6",
												"94": "2",
												"95": "10",
												"96": "13",
												"97": "10",
												"98": "12",
												"99": "0",
												"100": "0",
												"101": "0",
												"102": "1",
												"103": "93.8",
												"104": "50",
												"105": "0",
												"106": "0",
												"107": "554201",
												"108": "69467",
												"109": "55700",
												"110": "25201",
												"122": "N",
												"137": "DirectPay",
												"138": "N"
											},
											{
												"0": "68341763",
												"1": "MI1002",
												"2": "14000",
												"3": "14000",
												"4": "14000",
												"5": "60 months",
												"6": "10.56%",
												"7": "301.34",
												"8": "B",
												"9": "B3",
												"10": "Product Manager",
												"11": "8 years",
												"12": "MORTGAGE",
												"13": "98000",
												"14": "Not Verified",
												"15": "Jun-18",
												"16": "Current",
												"17": "n",
												"20": "credit_card",
												"21": "Credit card refinancing",
												"22": "152xx",
												"23": "PA",
												"24": "16.02",
												"25": "0",
												"26": "Jun-05",
												"27": "0",
												"30": "12",
												"31": "0",
												"32": "21930",
												"33": "32.30%",
												"34": "16",
												"35": "w",
												"36": "13642.15",
												"37": "13642.15",
												"38": "586.25",
												"39": "586.25",
												"40": "357.85",
												"41": "228.4",
												"42": "0",
												"43": "0",
												"44": "0",
												"45": "Sep-18",
												"46": "301.34",
												"47": "Oct-18",
												"48": "Sep-18",
												"49": "0",
												"51": "1",
												"52": "Individual",
												"56": "0",
												"57": "0",
												"58": "188168",
												"59": "1",
												"60": "3",
												"61": "2",
												"62": "2",
												"63": "10",
												"64": "54827",
												"65": "89",
												"66": "1",
												"67": "1",
												"68": "9202",
												"69": "54",
												"70": "68000",
												"71": "1",
												"72": "1",
												"73": "1",
												"74": "3",
												"75": "17106",
												"76": "41570",
												"77": "34.5",
												"78": "0",
												"79": "0",
												"80": "142",
												"81": "156",
												"82": "4",
												"83": "4",
												"84": "1",
												"85": "4",
												"87": "9",
												"89": "0",
												"90": "5",
												"91": "5",
												"92": "7",
												"93": "7",
												"94": "6",
												"95": "8",
												"96": "9",
												"97": "5",
												"98": "12",
												"99": "0",
												"100": "0",
												"101": "0",
												"102": "3",
												"103": "100",
												"104": "16.7",
												"105": "0",
												"106": "0",
												"107": "277254",
												"108": "76757",
												"109": "63500",
												"110": "79008",
												"122": "N",
												"137": "Cash",
												"138": "N"
											},
											{
												"0": "66310712",
												"1": "MI1003",
												"2": "8000",
												"3": "8000",
												"4": "8000",
												"5": "36 months",
												"6": "6.83%",
												"7": "246.4",
												"8": "A",
												"9": "A3",
												"10": "City Attorney",
												"11": "2 years",
												"12": "MORTGAGE",
												"13": "144000",
												"14": "Not Verified",
												"15": "Jun-18",
												"16": "Current",
												"17": "n",
												"20": "debt_consolidation",
												"21": "Debt consolidation",
												"22": "750xx",
												"23": "TX",
												"24": "22.23",
												"25": "0",
												"26": "May-01",
												"27": "0",
												"28": "60",
												"30": "15",
												"31": "0",
												"32": "2851",
												"33": "7.40%",
												"34": "34",
												"35": "w",
												"36": "7597.12",
												"37": "7597.12",
												"38": "486.73",
												"39": "486.73",
												"40": "402.88",
												"41": "83.85",
												"42": "0",
												"43": "0",
												"44": "0",
												"45": "Sep-18",
												"46": "246.4",
												"47": "Oct-18",
												"48": "Sep-18",
												"49": "0",
												"51": "1",
												"52": "Individual",
												"56": "0",
												"57": "0",
												"58": "416635",
												"59": "1",
												"60": "6",
												"61": "2",
												"62": "5",
												"63": "6",
												"64": "252494",
												"65": "84",
												"66": "0",
												"67": "0",
												"68": "1917",
												"69": "47",
												"70": "38400",
												"71": "5",
												"72": "1",
												"73": "3",
												"74": "6",
												"75": "27776",
												"76": "23119",
												"77": "7.9",
												"78": "0",
												"79": "0",
												"80": "168",
												"81": "205",
												"82": "25",
												"83": "6",
												"84": "4",
												"85": "113",
												"87": "6",
												"89": "0",
												"90": "2",
												"91": "3",
												"92": "4",
												"93": "7",
												"94": "18",
												"95": "8",
												"96": "12",
												"97": "3",
												"98": "15",
												"99": "0",
												"100": "0",
												"101": "0",
												"102": "2",
												"103": "94.1",
												"104": "0",
												"105": "0",
												"106": "0",
												"107": "484141",
												"108": "255345",
												"109": "25100",
												"110": "282141",
												"122": "N",
												"137": "Cash",
												"138": "N"
											},
											{
												"0": "68476807",
												"1": "MI1004",
												"2": "22000",
												"3": "22000",
												"4": "22000",
												"5": "60 months",
												"6": "17.47%",
												"7": "552.34",
												"8": "D",
												"9": "D1",
												"10": "Laborer",
												"11": "10+ years",
												"12": "OWN",
												"13": "60000",
												"14": "Source Verified",
												"15": "Jun-18",
												"16": "Current",
												"17": "n",
												"20": "credit_card",
												"21": "Credit card refinancing",
												"22": "476xx",
												"23": "IN",
												"24": "31.6",
												"25": "0",
												"26": "Mar-03",
												"27": "0",
												"29": "86",
												"30": "9",
												"31": "1",
												"32": "19700",
												"33": "60.10%",
												"34": "18",
												"35": "w",
												"36": "21532.51",
												"37": "21532.51",
												"38": "1061.98",
												"39": "1061.98",
												"40": "467.49",
												"41": "594.49",
												"42": "0",
												"43": "0",
												"44": "0",
												"45": "Sep-18",
												"46": "552.34",
												"47": "Oct-18",
												"48": "Sep-18",
												"49": "0",
												"51": "1",
												"52": "Individual",
												"56": "0",
												"57": "0",
												"58": "120562",
												"59": "0",
												"60": "2",
												"61": "0",
												"62": "0",
												"63": "30",
												"64": "100862",
												"65": "41",
												"66": "1",
												"67": "3",
												"68": "5985",
												"69": "57",
												"70": "32800",
												"71": "0",
												"72": "1",
												"73": "3",
												"74": "3",
												"75": "13396",
												"76": "11686",
												"77": "62.1",
												"78": "0",
												"79": "0",
												"80": "79",
												"81": "183",
												"82": "8",
												"83": "8",
												"84": "0",
												"85": "8",
												"87": "8",
												"89": "0",
												"90": "6",
												"91": "7",
												"92": "6",
												"93": "7",
												"94": "9",
												"95": "7",
												"96": "9",
												"97": "7",
												"98": "9",
												"99": "0",
												"100": "0",
												"101": "0",
												"102": "1",
												"103": "100",
												"104": "33.3",
												"105": "1",
												"106": "0",
												"107": "142179",
												"108": "120562",
												"109": "30800",
												"110": "109379",
												"122": "N",
												"137": "DirectPay",
												"138": "N"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "id",
												"type": "string"
											},
											{
												"key": "1",
												"name": "member_id",
												"type": "string"
											},
											{
												"key": "2",
												"name": "loan_amnt",
												"type": "string"
											},
											{
												"key": "3",
												"name": "funded_amnt",
												"type": "string"
											},
											{
												"key": "4",
												"name": "funded_amnt_inv",
												"type": "string"
											},
											{
												"key": "5",
												"name": "term",
												"type": "string"
											},
											{
												"key": "6",
												"name": "int_rate",
												"type": "string"
											},
											{
												"key": "7",
												"name": "installment",
												"type": "string"
											},
											{
												"key": "8",
												"name": "grade",
												"type": "string"
											},
											{
												"key": "9",
												"name": "sub_grade",
												"type": "string"
											},
											{
												"key": "10",
												"name": "emp_title",
												"type": "string"
											},
											{
												"key": "11",
												"name": "emp_length",
												"type": "string"
											},
											{
												"key": "12",
												"name": "home_ownership",
												"type": "string"
											},
											{
												"key": "13",
												"name": "annual_inc",
												"type": "string"
											},
											{
												"key": "14",
												"name": "verification_status",
												"type": "string"
											},
											{
												"key": "15",
												"name": "issue_d",
												"type": "string"
											},
											{
												"key": "16",
												"name": "loan_status",
												"type": "string"
											},
											{
												"key": "17",
												"name": "pymnt_plan",
												"type": "string"
											},
											{
												"key": "18",
												"name": "url",
												"type": "string"
											},
											{
												"key": "19",
												"name": "desc",
												"type": "string"
											},
											{
												"key": "20",
												"name": "purpose",
												"type": "string"
											},
											{
												"key": "21",
												"name": "title",
												"type": "string"
											},
											{
												"key": "22",
												"name": "zip_code",
												"type": "string"
											},
											{
												"key": "23",
												"name": "addr_state",
												"type": "string"
											},
											{
												"key": "24",
												"name": "dti",
												"type": "string"
											},
											{
												"key": "25",
												"name": "delinq_2yrs",
												"type": "string"
											},
											{
												"key": "26",
												"name": "earliest_cr_line",
												"type": "string"
											},
											{
												"key": "27",
												"name": "inq_last_6mths",
												"type": "string"
											},
											{
												"key": "28",
												"name": "mths_since_last_delinq",
												"type": "string"
											},
											{
												"key": "29",
												"name": "mths_since_last_record",
												"type": "string"
											},
											{
												"key": "30",
												"name": "open_acc",
												"type": "string"
											},
											{
												"key": "31",
												"name": "pub_rec",
												"type": "string"
											},
											{
												"key": "32",
												"name": "revol_bal",
												"type": "string"
											},
											{
												"key": "33",
												"name": "revol_util",
												"type": "string"
											},
											{
												"key": "34",
												"name": "total_acc",
												"type": "string"
											},
											{
												"key": "35",
												"name": "initial_list_status",
												"type": "string"
											},
											{
												"key": "36",
												"name": "out_prncp",
												"type": "string"
											},
											{
												"key": "37",
												"name": "out_prncp_inv",
												"type": "string"
											},
											{
												"key": "38",
												"name": "total_pymnt",
												"type": "string"
											},
											{
												"key": "39",
												"name": "total_pymnt_inv",
												"type": "string"
											},
											{
												"key": "40",
												"name": "total_rec_prncp",
												"type": "string"
											},
											{
												"key": "41",
												"name": "total_rec_int",
												"type": "string"
											},
											{
												"key": "42",
												"name": "total_rec_late_fee",
												"type": "string"
											},
											{
												"key": "43",
												"name": "recoveries",
												"type": "string"
											},
											{
												"key": "44",
												"name": "collection_recovery_fee",
												"type": "string"
											},
											{
												"key": "45",
												"name": "last_pymnt_d",
												"type": "string"
											},
											{
												"key": "46",
												"name": "last_pymnt_amnt",
												"type": "string"
											},
											{
												"key": "47",
												"name": "next_pymnt_d",
												"type": "string"
											},
											{
												"key": "48",
												"name": "last_credit_pull_d",
												"type": "string"
											},
											{
												"key": "49",
												"name": "collections_12_mths_ex_med",
												"type": "string"
											},
											{
												"key": "50",
												"name": "mths_since_last_major_derog",
												"type": "string"
											},
											{
												"key": "51",
												"name": "policy_code",
												"type": "string"
											},
											{
												"key": "52",
												"name": "application_type",
												"type": "string"
											},
											{
												"key": "53",
												"name": "annual_inc_joint",
												"type": "string"
											},
											{
												"key": "54",
												"name": "dti_joint",
												"type": "string"
											},
											{
												"key": "55",
												"name": "verification_status_joint",
												"type": "string"
											},
											{
												"key": "56",
												"name": "acc_now_delinq",
												"type": "string"
											},
											{
												"key": "57",
												"name": "tot_coll_amt",
												"type": "string"
											},
											{
												"key": "58",
												"name": "tot_cur_bal",
												"type": "string"
											},
											{
												"key": "59",
												"name": "open_acc_6m",
												"type": "string"
											},
											{
												"key": "60",
												"name": "open_act_il",
												"type": "string"
											},
											{
												"key": "61",
												"name": "open_il_12m",
												"type": "string"
											},
											{
												"key": "62",
												"name": "open_il_24m",
												"type": "string"
											},
											{
												"key": "63",
												"name": "mths_since_rcnt_il",
												"type": "string"
											},
											{
												"key": "64",
												"name": "total_bal_il",
												"type": "string"
											},
											{
												"key": "65",
												"name": "il_util",
												"type": "string"
											},
											{
												"key": "66",
												"name": "open_rv_12m",
												"type": "string"
											},
											{
												"key": "67",
												"name": "open_rv_24m",
												"type": "string"
											},
											{
												"key": "68",
												"name": "max_bal_bc",
												"type": "string"
											},
											{
												"key": "69",
												"name": "all_util",
												"type": "string"
											},
											{
												"key": "70",
												"name": "total_rev_hi_lim",
												"type": "string"
											},
											{
												"key": "71",
												"name": "inq_fi",
												"type": "string"
											},
											{
												"key": "72",
												"name": "total_cu_tl",
												"type": "string"
											},
											{
												"key": "73",
												"name": "inq_last_12m",
												"type": "string"
											},
											{
												"key": "74",
												"name": "acc_open_past_24mths",
												"type": "string"
											},
											{
												"key": "75",
												"name": "avg_cur_bal",
												"type": "string"
											},
											{
												"key": "76",
												"name": "bc_open_to_buy",
												"type": "string"
											},
											{
												"key": "77",
												"name": "bc_util",
												"type": "string"
											},
											{
												"key": "78",
												"name": "chargeoff_within_12_mths",
												"type": "string"
											},
											{
												"key": "79",
												"name": "delinq_amnt",
												"type": "string"
											},
											{
												"key": "80",
												"name": "mo_sin_old_il_acct",
												"type": "string"
											},
											{
												"key": "81",
												"name": "mo_sin_old_rev_tl_op",
												"type": "string"
											},
											{
												"key": "82",
												"name": "mo_sin_rcnt_rev_tl_op",
												"type": "string"
											},
											{
												"key": "83",
												"name": "mo_sin_rcnt_tl",
												"type": "string"
											},
											{
												"key": "84",
												"name": "mort_acc",
												"type": "string"
											},
											{
												"key": "85",
												"name": "mths_since_recent_bc",
												"type": "string"
											},
											{
												"key": "86",
												"name": "mths_since_recent_bc_dlq",
												"type": "string"
											},
											{
												"key": "87",
												"name": "mths_since_recent_inq",
												"type": "string"
											},
											{
												"key": "88",
												"name": "mths_since_recent_revol_delinq",
												"type": "string"
											},
											{
												"key": "89",
												"name": "num_accts_ever_120_pd",
												"type": "string"
											},
											{
												"key": "90",
												"name": "num_actv_bc_tl",
												"type": "string"
											},
											{
												"key": "91",
												"name": "num_actv_rev_tl",
												"type": "string"
											},
											{
												"key": "92",
												"name": "num_bc_sats",
												"type": "string"
											},
											{
												"key": "93",
												"name": "num_bc_tl",
												"type": "string"
											},
											{
												"key": "94",
												"name": "num_il_tl",
												"type": "string"
											},
											{
												"key": "95",
												"name": "num_op_rev_tl",
												"type": "string"
											},
											{
												"key": "96",
												"name": "num_rev_accts",
												"type": "string"
											},
											{
												"key": "97",
												"name": "num_rev_tl_bal_gt_0",
												"type": "string"
											},
											{
												"key": "98",
												"name": "num_sats",
												"type": "string"
											},
											{
												"key": "99",
												"name": "num_tl_120dpd_2m",
												"type": "string"
											},
											{
												"key": "100",
												"name": "num_tl_30dpd",
												"type": "string"
											},
											{
												"key": "101",
												"name": "num_tl_90g_dpd_24m",
												"type": "string"
											},
											{
												"key": "102",
												"name": "num_tl_op_past_12m",
												"type": "string"
											},
											{
												"key": "103",
												"name": "pct_tl_nvr_dlq",
												"type": "string"
											},
											{
												"key": "104",
												"name": "percent_bc_gt_75",
												"type": "string"
											},
											{
												"key": "105",
												"name": "pub_rec_bankruptcies",
												"type": "string"
											},
											{
												"key": "106",
												"name": "tax_liens",
												"type": "string"
											},
											{
												"key": "107",
												"name": "tot_hi_cred_lim",
												"type": "string"
											},
											{
												"key": "108",
												"name": "total_bal_ex_mort",
												"type": "string"
											},
											{
												"key": "109",
												"name": "total_bc_limit",
												"type": "string"
											},
											{
												"key": "110",
												"name": "total_il_high_credit_limit",
												"type": "string"
											},
											{
												"key": "111",
												"name": "revol_bal_joint",
												"type": "string"
											},
											{
												"key": "112",
												"name": "sec_app_earliest_cr_line",
												"type": "string"
											},
											{
												"key": "113",
												"name": "sec_app_inq_last_6mths",
												"type": "string"
											},
											{
												"key": "114",
												"name": "sec_app_mort_acc",
												"type": "string"
											},
											{
												"key": "115",
												"name": "sec_app_open_acc",
												"type": "string"
											},
											{
												"key": "116",
												"name": "sec_app_revol_util",
												"type": "string"
											},
											{
												"key": "117",
												"name": "sec_app_open_act_il",
												"type": "string"
											},
											{
												"key": "118",
												"name": "sec_app_num_rev_accts",
												"type": "string"
											},
											{
												"key": "119",
												"name": "sec_app_chargeoff_within_12_mths",
												"type": "string"
											},
											{
												"key": "120",
												"name": "sec_app_collections_12_mths_ex_med",
												"type": "string"
											},
											{
												"key": "121",
												"name": "sec_app_mths_since_last_major_derog",
												"type": "string"
											},
											{
												"key": "122",
												"name": "hardship_flag",
												"type": "string"
											},
											{
												"key": "123",
												"name": "hardship_type",
												"type": "string"
											},
											{
												"key": "124",
												"name": "hardship_reason",
												"type": "string"
											},
											{
												"key": "125",
												"name": "hardship_status",
												"type": "string"
											},
											{
												"key": "126",
												"name": "deferral_term",
												"type": "string"
											},
											{
												"key": "127",
												"name": "hardship_amount",
												"type": "string"
											},
											{
												"key": "128",
												"name": "hardship_start_date",
												"type": "string"
											},
											{
												"key": "129",
												"name": "hardship_end_date",
												"type": "string"
											},
											{
												"key": "130",
												"name": "payment_plan_start_date",
												"type": "string"
											},
											{
												"key": "131",
												"name": "hardship_length",
												"type": "string"
											},
											{
												"key": "132",
												"name": "hardship_dpd",
												"type": "string"
											},
											{
												"key": "133",
												"name": "hardship_loan_status",
												"type": "string"
											},
											{
												"key": "134",
												"name": "orig_projected_additional_accrued_interest",
												"type": "string"
											},
											{
												"key": "135",
												"name": "hardship_payoff_balance_amount",
												"type": "string"
											},
											{
												"key": "136",
												"name": "hardship_last_payment_amount",
												"type": "string"
											},
											{
												"key": "137",
												"name": "disbursement_method",
												"type": "string"
											},
											{
												"key": "138",
												"name": "debt_settlement_flag",
												"type": "string"
											},
											{
												"key": "139",
												"name": "debt_settlement_flag_date",
												"type": "string"
											},
											{
												"key": "140",
												"name": "settlement_status",
												"type": "string"
											},
											{
												"key": "141",
												"name": "settlement_date",
												"type": "string"
											},
											{
												"key": "142",
												"name": "settlement_amount",
												"type": "string"
											},
											{
												"key": "143",
												"name": "settlement_percentage",
												"type": "string"
											},
											{
												"key": "144",
												"name": "settlement_term",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/50822855-539b-48a3-afcf-322ffaf42318/resourceGroups/LendingClub_POC/providers/Microsoft.Synapse/workspaces/lendingclubwspace/bigDataPools/LCsparkpool",
						"name": "LCsparkpool",
						"type": "Spark",
						"endpoint": "https://lendingclubwspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/LCsparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							},
							"collapsed": false
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.types import DecimalType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import concat, col, lit, row_number"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_loan_details = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.loan_details\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# (df_loan_details.columns)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_1 = df_loan_details.withColumn(\"loan_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details_1.limit(5))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_filtered = df_loan_details_1.select(\"loan_id\", \"member_id\", \"loan_amnt\",\"funded_amnt\",\"term\",\"int_rate\",\"installment\",\"issue_d\",\r\n",
							"\"loan_status\",\"purpose\",\"title\",\"disbursement_method\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details_filtered.limit(10))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_filtered = df_loan_details_filtered.withColumn(\"loan_id\", concat(lit(\"LNI\"), col(\"loan_id\")))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details_filtered.limit(2))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_filtered.printSchema()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_filtered = df_loan_details_filtered.withColumn(\"loan_amnt\",df_loan_details_filtered.loan_amnt.cast('int'))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_filtered = df_loan_details_filtered.withColumn(\"funded_amnt\",df_loan_details_filtered.funded_amnt.cast('int'))"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_filtered = df_loan_details_filtered.withColumn(\"installment\",df_loan_details_filtered.installment.cast(DecimalType(18,2)))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details_analysis = df_loan_details_filtered.toPandas()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details_analysis.describe()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details_analysis.isna().sum()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details_analysis.nunique()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details_filtered.printSchema()"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df = df.withColumn(\"customer_id\", when(col(\"customer_id\").isNotNull, col(\"customer_id\")).otherwise(lit(null)))"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_loan_details_filtered.write\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .synapsesql(\"LC_DWH.gold.Loan_Details_Dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Dims_Payment_Details')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "22f6e110-6fe1-4ed7-b6ab-57ee7c4d5b28"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							},
							"collapsed": false
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.types import DecimalType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import concat, col, lit, row_number"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_loan_details = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.loan_details\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %%pyspark\r\n",
							"# (df_loan_details.columns)"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details = df_loan_details.withColumn(\"transaction_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details = df_loan_details.select(\"transaction_id\",\"member_id\",\"funded_amnt_inv\",\"installment\",\r\n",
							"\"total_pymnt\",\"last_pymnt_d\", \"last_pymnt_amnt\", \"next_pymnt_d\",\"disbursement_method\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_payment_details.limit(10))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details = df_payment_details.withColumn(\"transaction_id\", concat(lit(\"TRANS\"), col(\"transaction_id\")))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details.printSchema()"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details = df_payment_details.withColumn(\"funded_amnt_inv\",df_payment_details.funded_amnt_inv.cast('int'))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details = df_payment_details.withColumn(\"installment\",df_payment_details.installment.cast(DecimalType(18,2)))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details = df_payment_details.withColumn(\"total_pymnt\",df_payment_details.total_pymnt.cast(DecimalType(18,2)))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details = df_payment_details.withColumn(\"last_pymnt_amnt\",df_payment_details.last_pymnt_amnt.cast(DecimalType(18,2)))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details.printSchema()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details_pd = df_payment_details.toPandas()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details_pd.describe()"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details_pd.isnull().sum()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details_pd.nunique()"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_payment_details.printSchema()"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_payment_details.write\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .synapsesql(\"LC_DWH.gold.Payment_Details_Dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Cleaning_Fact_Table')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "eb36e6d4-5292-406d-83c5-43bcf5d85a2a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							},
							"collapsed": false
						},
						"source": [
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.types import DecimalType\r\n",
							"from pyspark.sql.window import Window\r\n",
							"from pyspark.sql.functions import concat, col, lit, row_number, split,substring,regexp_replace, to_date"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_loan_details = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.loan_details\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_loan_details.limit(5))"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df = df_loan_details.withColumn(\"issue_date\", to_date(df_loan_details.issue_d, \"yyyy-MM-dd\"))"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# %%pyspark\r\n",
							"# (df_loan_details.columns)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details.printSchema()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_loan_details.select(\"id\",\"member_id\",\"loan_amnt\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_fact.limit(5))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Adding the required ID columns"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"loan_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"investor_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"account_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"account_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"transaction_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"defaulter_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"id\")))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn('memb_id', split(df_fact['member_id'], 'I').getItem(1))"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"memb_id\",df_fact.memb_id.cast('int'))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"customer_id\",row_number() \\\r\n",
							".over( Window.orderBy(\"memb_id\")))"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_fact.limit(5))"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"loan_id\", concat(lit(\"LNI\"), col(\"loan_id\")))"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"customer_id\", concat(lit(\"CUS\"), col(\"customer_id\")))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"account_id\", concat(lit(\"ACCID\"), col(\"account_id\")))"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"defaulter_id\", concat(lit(\"DEF\"), col(\"defaulter_id\")))"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"transaction_id\", concat(lit(\"TRANS\"), col(\"transaction_id\")))"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact = df_fact.withColumn(\"investor_id\", concat(lit(\"INV\"), col(\"investor_id\")))"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_fact.limit(5))"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact_final = df_fact.select(\"id\",\"loan_id\",\"customer_id\",\"account_id\",\"transaction_id\", \"defaulter_id\", \"investor_id\", \"loan_amnt\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# display(df_fact_final.limit(5))"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_fact_final.printSchema()"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact_final = df_fact_final.withColumn(\"loan_amnt\",df_fact_final.loan_amnt.cast('int'))"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_fact_final = df_fact_final.withColumn(\"id\",df_fact_final.id.cast('int'))"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Dataset Analysis"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_fact_final_pd = df_fact_final.toPandas()"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_fact_final_pd.describe()"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_fact_final_pd.isna().sum()"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_fact_final_pd.nunique()"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_fact_final.write\r\n",
							" .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							" .mode(\"overwrite\")\r\n",
							" .synapsesql(\"LC_DWH.gold.Fact_table\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 28
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Null_Validation')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Transformations"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "31237a9f-43d5-455d-b2d8-157e6060b433"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Query to find the total count of customers by state and country"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Add required imports\r\n",
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.functions import col"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_loan_details = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://temp-staging@lendingclubadlsgen2.dfs.core.windows.net/temporary-staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.bronze.loan_details\")\r\n",
							"                    )"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# df_loan_details.show()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details.createOrReplaceTempView(\"loan_details\")"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Creating a dataframe to display percentage of null values in each column\r\n",
							"a = pd.DataFrame()\r\n",
							"a['Percentage of null values']=['10% or less','20% or less','30% or less','40% or less','50% or less','60% or less','70% or less']\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_details_pd = df_loan_details.toPandas()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"ten_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.1])\r\n",
							"twenty_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.2])\r\n",
							"thirty_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.3])\r\n",
							"fourty_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.4])\r\n",
							"fifty_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.5])\r\n",
							"sixty_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.6])\r\n",
							"seventy_percent = len(df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.7])"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"a['No.of columns'] = [ten_percent,twenty_percent,thirty_percent,fourty_percent,fifty_percent,sixty_percent,seventy_percent]"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"a.head(100)"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(df_loan_details_pd.isnull().sum().sum())/(df_loan_details_pd.shape[0]*df_loan_details_pd.shape[1])"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Considering only those columns which have null values less than 40% in that particular column\r\n",
							"df = df_loan_details_pd[df_loan_details_pd.columns[((df_loan_details_pd.isnull().sum())/len(df_loan_details_pd)) < 0.4]]\r\n",
							"df.shape"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Instead of checking every column of 53 columns like above, here we are running a for loop on top of 'object' columns \r\n",
							"# and take a decison based on the output of this cell.\r\n",
							"for i in df_loan_details_pd.columns[df_loan_details_pd.dtypes == 'object']:\r\n",
							"    print(df_loan_details_pd[i].value_counts())\r\n",
							"    print('************************')"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# (df.write\r\n",
							"#  # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
							"#  # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
							"#  # .option(Constants.SERVER, \"lendingclubwspace.sql.azuresynapse.net\")\r\n",
							"#  # if `Constants.TEMP_FOLDER` is not provided, the connector will use the runtime staging directory config (see section on Configuration Options for details).\r\n",
							"#  .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"#  .mode(\"overwrite\")\r\n",
							"#  # Required parameter - Three-part table name to which data will be written\r\n",
							"#  .synapsesql(\"LC_DWH.gold.customer_dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transformation_Dims_Customer_Copy1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Transformations"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4e56eeb3-20b8-432c-b737-bcd7ba62cec3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Query to find the total count of customers by state and country"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import avg, count,col,when,countDistinct,round, filter"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Query to find the average age of customers by state and country using pyspark dataframe\r\n",
							"# customer_avg_age=df.groupBy(\"state\", \"country\").agg(avg(\"age\"))\r\n",
							" "
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# display(customer_avg_age.show())"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# #Query to find the number of customers with a premium status of \"true\" in each country, grouped by age range using pyspark dataframe:\r\n",
							" \r\n",
							" \r\n",
							"# df.filter(\"prm_status = 'TRUE'\" ) \\\r\n",
							"#   .withColumn(\"age_range\", when((col(\"age\") >= 18) & (col(\"age\") <= 25), \"Youngsters\")\r\n",
							"#                            .when((col(\"age\") > 25) & (col(\"age\") <= 35), \"Working class\")\r\n",
							"#                            .when((col(\"age\") > 35) & (col(\"age\") <= 45), \"Middle Age\")\r\n",
							"#                            .otherwise(\"Senior citizens\")) \\\r\n",
							"#   .groupBy(\"country\", \"age_range\") \\\r\n",
							"#   .agg(count(\"*\")) \\\r\n",
							"#   .show()\r\n",
							" "
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Add required imports\r\n",
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"from pyspark.sql.functions import col"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# Read from existing internal table\r\n",
							"df_customer_dim = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.gold.customer_dim\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							"                    )\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"df_customer_dim.show()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_customer_dim.createOrReplaceTempView(\"customer_details\")"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Query to find the average age of customers by state and country using pyspark dataframe"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Query to find the average age of customers by state and country using pyspark dataframe\r\n",
							"customer_avg_age=spark.sql(\"SELECT state, country, count(*) as total_count FROM customer_details GROUP BY state, country\")"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"customer_avg_age.show()"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Query to find the number of customers with a premium status of \"true\" in each country, grouped by age range"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Query to find the number of customers with a premium status of \"true\" in each country, grouped by age range using pyspark dataframe:\r\n",
							"\r\n",
							"customer_age_range=spark.sql(\"SELECT country, CASE WHEN age BETWEEN 18 AND 25 THEN 'Youngsters' \\\r\n",
							"           WHEN age BETWEEN 26 AND 35 THEN 'Working class' \\\r\n",
							"           WHEN age BETWEEN 36 AND 45 THEN 'Middle Age' \\\r\n",
							"           ELSE 'Senior Citizens' \\\r\n",
							"       END as age_range, \\\r\n",
							"       COUNT(*) \\\r\n",
							" FROM customer_details \\\r\n",
							"WHERE prm_status = 'TRUE' \\\r\n",
							"GROUP BY country, age_range\")"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"customer_age_range.show()"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Query to find the percentage of customers in each state that are premium customers, grouped by country"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# --Query to find the percentage of customers in each state that are premium customers, grouped by country:\r\n",
							"\r\n",
							"member_percentage_df = spark.sql(\" \\\r\n",
							"WITH customer_counts AS ( \\\r\n",
							"    SELECT country, state, COUNT(*) as total_customers \\\r\n",
							"    FROM customer_details \\\r\n",
							"    GROUP BY country, state \\\r\n",
							"), \\\r\n",
							"member_counts AS ( \\\r\n",
							"    SELECT country, state, COUNT(DISTINCT member_id) as total_members \\\r\n",
							"    FROM customer_details \\\r\n",
							"    WHERE member_id IS NOT NULL and  prm_status = 'TRUE' \\\r\n",
							"    GROUP BY country, state \\\r\n",
							") \\\r\n",
							"SELECT customer_counts.country, customer_counts.state, \\\r\n",
							"       ROUND(member_counts.total_members / customer_counts.total_customers * 100, 2) as member_percentage \\\r\n",
							"FROM customer_counts \\\r\n",
							"JOIN member_counts \\\r\n",
							"ON customer_counts.country = member_counts.country AND customer_counts.state = member_counts.state \\\r\n",
							" \")"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"member_percentage_df.show()"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_payment_details_dim = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.gold.Payment_Details_Dim\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							"                    )\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"df_payment_details_dim.show()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_payment_details_dim.createOrReplaceTempView(\"payment_details\")"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.conf.set(\"spark.sql.unacceptable_rated_pts\",0)\r\n",
							"spark.conf.set(\"spark.sql.very_bad_rated_pts\",100)\r\n",
							"spark.conf.set(\"spark.sql.bad_rated_pts\",250)\r\n",
							"spark.conf.set(\"spark.sql.good_rated_pts\",500)\r\n",
							"spark.conf.set(\"spark.sql.very_good_rated_pts\",650)\r\n",
							"spark.conf.set(\"spark.sql.excellent_rated_pts\",800)"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.conf.set(\"spark.sql.unacceptable_grade_pts\",750)\r\n",
							"spark.conf.set(\"spark.sql.very_bad_grade_pts\", 1000)\r\n",
							"spark.conf.set(\"spark.sql.bad_grade_pts\",1500)\r\n",
							"spark.conf.set(\"spark.sql.good_grade_pts\",2000)\r\n",
							"spark.conf.set(\"spark.sql.very_good_grade_pts\",2500)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"unacceptable_grade=\"F\"\r\n",
							"very_bad_grade=\"E\"\r\n",
							"bad_grade=\"D\"\r\n",
							"good_grade=\"C\"\r\n",
							"very_good_grade=\"B\"\r\n",
							"excellent_grade=\"A\""
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"payment_last_df = spark.sql(\"select c.member_id, c.state, c.country, c.first_name, c.last_name, \\\r\n",
							"  case \\\r\n",
							"    when p.last_pymnt_amnt < (p.installment * 0.5) then ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    when p.last_pymnt_amnt >= (p.installment * 0.5) and p.last_pymnt_amnt < p.installment then ${spark.sql.bad_rated_pts} \\\r\n",
							"    when (p.last_pymnt_amnt = (p.installment)) then ${spark.sql.good_rated_pts} \\\r\n",
							"    when p.last_pymnt_amnt > (p.installment) and p.last_pymnt_amnt <= (p.installment * 1.50) then ${spark.sql.very_good_rated_pts} \\\r\n",
							"    when p.last_pymnt_amnt > (p.installment * 1.50) then ${spark.sql.excellent_rated_pts} \\\r\n",
							"    else ${spark.sql.unacceptable_rated_pts} \\\r\n",
							"  end as last_payment_pts, \\\r\n",
							"  case \\\r\n",
							"    when p.total_pymnt >= (p.funded_amnt_inv * 0.50) then ${spark.sql.very_good_rated_pts} \\\r\n",
							"    when p.total_pymnt < (p.funded_amnt_inv * 0.50) and p.total_pymnt > 0 then ${spark.sql.good_rated_pts} \\\r\n",
							"    when p.total_pymnt = 0 or (p.total_pymnt) is null then ${spark.sql.unacceptable_rated_pts} \\\r\n",
							"    end as total_payment_pts \\\r\n",
							"from payment_details p \\\r\n",
							"inner join customer_details c on c.member_id = p.member_id\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"payment_last_df.createOrReplaceTempView(\"payment_points_df\")"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"select * from payment_points_df where last_payment_pts!= 500 or total_payment_pts!=500 \").show(7)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Reading data from Loan Defaulter Dimension Table "
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_loan_defaulter_dim = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.gold.Loan_Defaulter_Dim\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							"                    )\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"display(df_loan_defaulter_dim.show(5))"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_loan_defaulter_dim.createOrReplaceTempView(\"loan_default_details\")"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_default_pts = spark.sql(\r\n",
							"    \"SELECT p.*, \\\r\n",
							"    CASE \\\r\n",
							"    WHEN l.delinq_2yrs = 0 THEN ${spark.sql.excellent_rated_pts} \\\r\n",
							"    WHEN l.delinq_2yrs BETWEEN 1 AND 2 THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"    WHEN l.delinq_2yrs BETWEEN 3 AND 5 THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    WHEN l.delinq_2yrs > 5 OR l.delinq_2yrs IS NULL THEN ${spark.sql.unacceptable_rated_pts} \\\r\n",
							"    END AS delinq_pts, \\\r\n",
							"    CASE \\\r\n",
							"    WHEN l.pub_rec = 0 THEN ${spark.sql.excellent_rated_pts} \\\r\n",
							"    WHEN l.pub_rec BETWEEN 1 AND 2 THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"    WHEN l.pub_rec BETWEEN 3 AND 5 THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    WHEN l.pub_rec > 5 OR l.pub_rec IS NULL THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    END AS pub_rec_pts, \\\r\n",
							"    CASE \\\r\n",
							"    WHEN l.pub_rec_bankruptcies = 0 THEN ${spark.sql.excellent_rated_pts}  \\\r\n",
							"    WHEN l.pub_rec_bankruptcies BETWEEN 1 AND 2 THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"    WHEN l.pub_rec_bankruptcies BETWEEN 3 AND 5 THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    WHEN l.pub_rec_bankruptcies > 5 OR l.pub_rec_bankruptcies IS NULL THEN ${spark.sql.unacceptable_rated_pts} \\\r\n",
							"    END AS public_bankruptcies_pts, \\\r\n",
							"    CASE \\\r\n",
							"    WHEN l.inq_last_6mths = 0 THEN ${spark.sql.excellent_rated_pts} \\\r\n",
							"    WHEN l.inq_last_6mths BETWEEN 1 AND 2 THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"    WHEN l.inq_last_6mths BETWEEN 3 AND 5 THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    WHEN l.inq_last_6mths > 5 OR l.inq_last_6mths IS NULL THEN ${spark.sql.unacceptable_rated_pts} \\\r\n",
							"    END AS enq_pts, \\\r\n",
							"    CASE \\\r\n",
							"    WHEN l.hardship_flag = 'N' THEN ${spark.sql.very_good_rated_pts} \\\r\n",
							"    WHEN l.hardship_flag = 'Y' OR l.hardship_flag IS NULL THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"    END AS hardship_pts \\\r\n",
							"    FROM loan_default_details l \\\r\n",
							"    LEFT JOIN payment_points_df p ON p.member_id = l.member_id\"\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_default_pts.createOrReplaceTempView(\"loan_default_points_df\")"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"loan_df = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.gold.Loan_Details_Dim\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							"                    )\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"loan_df.show(5)"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_df.createOrReplaceTempView(\"loan_details\")"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### Reading data from Accounts Details Dimension Table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"# Read from existing internal table\r\n",
							"account_df = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.gold.Account_Details_Dim\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							"                    )\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"account_df.show(5)"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"account_df.createOrReplaceTempView(\"account_details\")"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df_account_details_dim = (spark.read\r\n",
							"                     .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"                     .synapsesql(\"LC_DWH.gold.Account_Details_Dim\")\r\n",
							"                     # Column-pruning i.e., query select column values.\r\n",
							"                    )\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"df_account_details_dim.show(5)"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfToReadFromTable.createOrReplaceTempView(\"customer_details\")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"financial_df = spark.sql(\r\n",
							"    \"SELECT ldef.*, \\\r\n",
							"    CASE \\\r\n",
							"        WHEN LOWER(l.loan_status) LIKE '%fully paid%' THEN ${spark.sql.excellent_rated_pts} \\\r\n",
							"        WHEN LOWER(l.loan_status) LIKE '%current%' THEN ${spark.sql.good_rated_pts} \\\r\n",
							"        WHEN LOWER(l.loan_status) LIKE '%in grace period%' THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"        WHEN LOWER(l.loan_status) LIKE '%late (16-30 days)%' OR LOWER(l.loan_status) LIKE '%late (31-120 days)%' THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"        WHEN LOWER(l.loan_status) LIKE '%charged off%' THEN ${spark.sql.unacceptable_rated_pts} \\\r\n",
							"    END AS loan_status_pts, \\\r\n",
							"    CASE \\\r\n",
							"        WHEN LOWER(a.home_ownership) LIKE '%own%' THEN ${spark.sql.excellent_rated_pts} \\\r\n",
							"        WHEN LOWER(a.home_ownership) LIKE '%rent%' THEN ${spark.sql.good_rated_pts} \\\r\n",
							"        WHEN LOWER(a.home_ownership) LIKE '%mortgage%' THEN ${spark.sql.bad_rated_pts} \\\r\n",
							"        WHEN LOWER(a.home_ownership) LIKE '%any%' OR LOWER(a.home_ownership) IS NULL THEN ${spark.sql.very_bad_rated_pts} \\\r\n",
							"    END AS home_pts,  \\\r\n",
							"    CASE \\\r\n",
							"        WHEN l.funded_amnt <= (a.tot_hi_cred_lim * 0.10) THEN ${spark.sql.excellent_rated_pts}  \\\r\n",
							"        WHEN l.funded_amnt > (a.tot_hi_cred_lim * 0.10) AND l.funded_amnt <= (a.tot_hi_cred_lim * 0.20)  THEN ${spark.sql.very_good_rated_pts}  \\\r\n",
							"        WHEN l.funded_amnt > (a.tot_hi_cred_lim * 0.20) AND l.funded_amnt <= (a.tot_hi_cred_lim * 0.30)  THEN ${spark.sql.good_rated_pts}  \\\r\n",
							"        WHEN l.funded_amnt > (a.tot_hi_cred_lim * 0.30) AND l.funded_amnt <= (a.tot_hi_cred_lim * 0.50)  THEN ${spark.sql.bad_rated_pts}  \\\r\n",
							"        WHEN l.funded_amnt > (a.tot_hi_cred_lim * 0.50) AND l.funded_amnt <= (a.tot_hi_cred_lim * 0.70)  THEN ${spark.sql.very_bad_rated_pts}  \\\r\n",
							"        WHEN l.funded_amnt > (a.tot_hi_cred_lim * 0.70) THEN ${spark.sql.unacceptable_rated_pts}  \\\r\n",
							"    END AS credit_limit_pts, \\\r\n",
							"    CASE \\\r\n",
							"        WHEN (a.grade) ='A' and (a.sub_grade)='A1' THEN ${spark.sql.excellent_rated_pts}  \\\r\n",
							"        WHEN (a.grade) ='A' and (a.sub_grade)='A2' THEN (${spark.sql.excellent_rated_pts}* 0.80)  \\\r\n",
							"        WHEN (a.grade) ='A' and (a.sub_grade)='A3' THEN (${spark.sql.excellent_rated_pts}* 0.60)  \\\r\n",
							"        WHEN (a.grade) ='A' and (a.sub_grade)='A4' THEN (${spark.sql.excellent_rated_pts}* 0.40)  \\\r\n",
							"        WHEN (a.grade) ='A' and (a.sub_grade)='A5' THEN (${spark.sql.excellent_rated_pts}* 0.20)  \\\r\n",
							"        WHEN (a.grade) ='B' and (a.sub_grade)='B1' THEN (${spark.sql.very_good_rated_pts})  \\\r\n",
							"        WHEN (a.grade) ='B' and (a.sub_grade)='B2' THEN (${spark.sql.very_good_rated_pts}* 0.80)  \\\r\n",
							"        WHEN (a.grade) ='B' and (a.sub_grade)='B3' THEN (${spark.sql.very_good_rated_pts}* 0.60)  \\\r\n",
							"        WHEN (a.grade) ='B' and (a.sub_grade)='B4' THEN (${spark.sql.very_good_rated_pts}* 0.40)  \\\r\n",
							"        WHEN (a.grade) ='B' and (a.sub_grade)='B5' THEN (${spark.sql.very_good_rated_pts}* 0.20)  \\\r\n",
							"        WHEN (a.grade) ='C' and (a.sub_grade)='C1' THEN (${spark.sql.good_rated_pts})  \\\r\n",
							"        WHEN (a.grade) ='C' and (a.sub_grade)='C2' THEN (${spark.sql.good_rated_pts}* 0.80)  \\\r\n",
							"        WHEN (a.grade) ='C' and (a.sub_grade)='C3' THEN (${spark.sql.good_rated_pts}* 0.60)  \\\r\n",
							"        WHEN (a.grade) ='C' and (a.sub_grade)='C4' THEN (${spark.sql.good_rated_pts}* 0.40)  \\\r\n",
							"        WHEN (a.grade) ='C' and (a.sub_grade)='C5' THEN (${spark.sql.good_rated_pts}* 0.20)  \\\r\n",
							"        WHEN (a.grade) ='D' and (a.sub_grade)='D1' THEN (${spark.sql.bad_rated_pts})  \\\r\n",
							"        WHEN (a.grade) ='D' and (a.sub_grade)='D2' THEN (${spark.sql.bad_rated_pts}*0.80)  \\\r\n",
							"        WHEN (a.grade) ='D' and (a.sub_grade)='D3' THEN (${spark.sql.bad_rated_pts}*0.60)  \\\r\n",
							"        WHEN (a.grade) ='D' and (a.sub_grade)='D4' THEN (${spark.sql.bad_rated_pts}*0.40)  \\\r\n",
							"        WHEN (a.grade) ='D' and (a.sub_grade)='D5' THEN (${spark.sql.bad_rated_pts}*0.20)  \\\r\n",
							"        WHEN (a.grade) ='E' and (a.sub_grade)='E1' THEN (${spark.sql.very_bad_rated_pts})  \\\r\n",
							"        WHEN (a.grade) ='E' and (a.sub_grade)='E2' THEN (${spark.sql.very_bad_rated_pts}*0.80)  \\\r\n",
							"        WHEN (a.grade) ='E' and (a.sub_grade)='E3' THEN (${spark.sql.very_bad_rated_pts}*0.60)  \\\r\n",
							"        WHEN (a.grade) ='E' and (a.sub_grade)='E4' THEN (${spark.sql.very_bad_rated_pts}*0.40)  \\\r\n",
							"        WHEN (a.grade) ='E' and (a.sub_grade)='E5' THEN (${spark.sql.very_bad_rated_pts}*0.20)  \\\r\n",
							"        WHEN (a.grade) in ('F','G') and (a.sub_grade) in ('F1','G1') THEN (${spark.sql.unacceptable_rated_pts})  \\\r\n",
							"        WHEN (a.grade) in ('F','G') and (a.sub_grade) in ('F2','G2') THEN (${spark.sql.unacceptable_rated_pts}*0.80)  \\\r\n",
							"        WHEN (a.grade) in ('F','G') and (a.sub_grade) in ('F3','G3') THEN (${spark.sql.unacceptable_rated_pts}*0.60)  \\\r\n",
							"        WHEN (a.grade) in ('F','G') and (a.sub_grade) in ('F4','G4') THEN (${spark.sql.unacceptable_rated_pts}*0.40)  \\\r\n",
							"        WHEN (a.grade) in ('F','G') and (a.sub_grade) in ('F5','G5') THEN (${spark.sql.unacceptable_rated_pts}*0.20)  \\\r\n",
							"    END AS grade_pts \\\r\n",
							" FROM loan_default_points_df ldef \\\r\n",
							" LEFT JOIN loan_details l ON ldef.member_id = l.member_id \\\r\n",
							" LEFT JOIN account_details a ON a.member_id = ldef.member_id\")"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"financial_df.show()"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"financial_df.printSchema()"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"financial_df.createOrReplaceTempView(\"loan_score_details\")"
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score = spark.sql(\"SELECT member_id, first_name, last_name, state, country, \\\r\n",
							"((last_payment_pts+total_payment_pts)*0.20) as payment_history_pts, \\\r\n",
							"((delinq_pts +pub_rec_pts+public_bankruptcies_pts+enq_pts+hardship_pts)*0.45) as defaulters_history_pts, \\\r\n",
							"((loan_status_pts+home_pts+credit_limit_pts+grade_pts)*0.35) as financial_health_pts \\\r\n",
							"FROM loan_score_details\")"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score.show(5)"
						],
						"outputs": [],
						"execution_count": 40
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"loan_score.createOrReplaceTempView(\"loan_score_pts\")"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score_final=spark.sql(\"select ls.member_id,ls.first_name,ls.last_name,ls.state,ls.country, \\\r\n",
							"(payment_history_pts+defaulters_history_pts+financial_health_pts) as loan_score \\\r\n",
							"from loan_score_pts ls \")"
						],
						"outputs": [],
						"execution_count": 42
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score_final.createOrReplaceTempView(\"loan_score_eval\")"
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score_final=spark.sql(\"select ls.*, \\\r\n",
							"case \\\r\n",
							"WHEN loan_score > ${spark.sql.very_good_grade_pts} THEN '\" + excellent_grade + \"' \\\r\n",
							"WHEN loan_score <= ${spark.sql.very_good_grade_pts} AND loan_score > ${spark.sql.good_grade_pts} THEN '\" + very_good_grade + \"' \\\r\n",
							"WHEN loan_score <= ${spark.sql.good_grade_pts} AND loan_score > ${spark.sql.bad_grade_pts} THEN '\" + good_grade + \"' \\\r\n",
							"WHEN loan_score <= ${spark.sql.bad_grade_pts} AND loan_score > ${spark.sql.very_bad_grade_pts} THEN '\" + bad_grade + \"' \\\r\n",
							"WHEN loan_score <= ${spark.sql.very_bad_grade_pts} AND loan_score > ${spark.sql.unacceptable_grade_pts} THEN '\" + very_bad_grade + \"' \\\r\n",
							"WHEN loan_score <= ${spark.sql.unacceptable_grade_pts} THEN '\" + unacceptable_grade + \"' \\\r\n",
							"end as loan_final_grade \\\r\n",
							"from loan_score_eval ls\")"
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score_final.createOrReplaceTempView(\"loan_final_table\")"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"loan_score_final.show(10)"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"select * from loan_final_table where loan_final_grade in ('C') \").show()"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# from pyspark.sql.functions import when, col"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# import com.microsoft.spark.sqlanalytics\r\n",
							"# from com.microsoft.spark.sqlanalytics.Constants import Constants"
						],
						"outputs": [],
						"execution_count": 35
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# (df.write\r\n",
							"#  # If `Constants.SERVER` is not provided, the `<database_name>` from the three-part table name argument\r\n",
							"#  # to `synapsesql` method is used to infer the Synapse Dedicated SQL End Point.\r\n",
							"#  # .option(Constants.SERVER, \"lendingclubwspace.sql.azuresynapse.net\")\r\n",
							"#  # if `Constants.TEMP_FOLDER` is not provided, the connector will use the runtime staging directory config (see section on Configuration Options for details).\r\n",
							"#  .option(Constants.TEMP_FOLDER, \"abfss://fs-lendingclub-staging@lendingclubadlsgen2.dfs.core.windows.net/temp_staging\")\r\n",
							"#  .mode(\"overwrite\")\r\n",
							"#  # Required parameter - Three-part table name to which data will be written\r\n",
							"#  .synapsesql(\"LC_DWH.gold.customer_dim\", Constants.INTERNAL))"
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LCsparkpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LC_DWH')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		}
	]
}